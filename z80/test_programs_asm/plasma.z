; 
; TeensyZ80 display mode test

PORT_RAM_BANK_SET       equ 200
PORT_RAM_BANK_RESET     equ 07fffh
PORT_VRAM_PALETTE_IDX   equ 7
PORT_VRAM_BUFFER_LOC    equ 0
PORT_VRAM_DRAW          equ 8
PORT_VRAM_SETMODE       equ 9

PORT_FILESYS_READ_WRITE equ 10
PORT_FILESYS_OPEN_CLOSE equ 11
PORT_FILESYS_NEXT       equ 12

FILESYS_RW_EXEC         equ 13
FILESYS_RW_SETCMDMEMPTR equ 2
FILESYS_OPEN_OPENFILE   equ 5
FILESYS_OPEN_SETMEMPTR  equ 6
FILESYS_NEXT_GETNEXT    equ 9
FILESYS_NEXT_SETMEMPTR  equ 10
FILESYS_CLOSE_FILE      equ 12

OPEN_READ               equ 0
OPEN_WRITE              equ 1
OPEN_WRITE_CREATE       equ 2
OPEN_APPEND             equ 3
OPEN_RDWR               equ 4

COLOUR_BLACK   equ 00000h
COLOUR_BLUE    equ 0001Fh
COLOUR_RED     equ 0F800h
COLOUR_GREEN   equ 007E0h
COLOUR_CYAN    equ 007FFh
COLOUR_MAGENTA equ 0F81Fh
COLOUR_YELLOW  equ 0FFE0h
COLOUR_WHITE   equ 0FFFFh



  ;programs start at 0x1000
  .org 01000h
start:
  ld de, str_console_prompt
  call print_string
  call newline
  
  ld a, 6                 
  out (PORT_VRAM_SETMODE), a ; 'vram' displaymode 6: 80x60

  ; we can put out BC now to write VRAM
  ld bc, 0200h                  ; pixel mem offset, after palette
  ld hl, 012c0h                 ; size  of pixel data (80x60)
  ld de, image_pixels_80x60     ; pixel data in binary
  call ram_2_vram
  
  ld bc, 0
loadpalette:
  inc bc
  inc bc
  ld de, palette_defn
  call palette_ram_2_vram
  
  ld hl, 0
cycle_palette_idx:
  inc hl
  ld a, l
  cp 128
  jr z,exit_program
  out (PORT_VRAM_PALETTE_IDX), a     ; inc palette idx
  ld a, 0
  out (PORT_VRAM_DRAW), a            ; draw vram
  jr cycle_palette_idx
  
exit_program:
  ret

iloop: 
  jr iloop
  

print_string:
  push af 
  push de
print_string_loop: 
  ld a, (de)
  or a
  jr z, print_string_end
  out ($03), a 
  inc de
  jr print_string_loop 
print_string_end:
  pop de
  pop af
  ret
  
newline:
  push af
  in a, ($04)
  inc a
  out ($04), a
  ld a, 0
  out ($05), a
  pop af
  ret

setcolour: ;16-bit colour in bc
  push af
  ld a, b
  out ($06), a
  ld a, c
  out ($06), a
  pop af
  ret

  ; de = src palette in ram, bc = index start
palette_ram_2_vram:
  di
  push de
  push bc
  push hl
  push af 
  ld a, 1
  out (PORT_RAM_BANK_SET), a

  ;ld bc, 0
  ld hl, 0200h
  
palette_ram_2_vram_loop: 
  ld a, (de)
  out (c), a
  dec hl
  inc de
  inc bc
  
  ld a, b ;wrap
  and 01h
  ld b, a
  
  ld a, h
  or l
  jr nz,palette_ram_2_vram_loop  
  
  ; return to non-vram
  ld bc, 0FFFFh
  in a, (c)
  pop af
  pop hl
  pop bc
  pop de
  ei
  ret


  ; de = src in ram, bc vram offset, hl = size
ram_2_vram:
  di
  push de
  push bc
  push hl
  push af 
  ld a, 1
  out (PORT_RAM_BANK_SET), a
  
ram_2_vram_loop: 
  ld a, (de)
  out (c), a
  dec hl
  inc de
  inc bc
  
  ld a, h
  or l
  jr nz,ram_2_vram_loop  
  
  ; return to non-vram
  ld bc, 0FFFFh
  in a, (c)
  pop af
  pop hl
  pop bc
  pop de
  ei
  ret

str_console_prompt:
  defb 'Loading plasma data into VRAM...',0
  
image_pixels_80x60:
  incbin "plasma_pixels_80_60.raw"
  
palette_defn:
  incbin "palette_all.rgb565"
  
scratch_mem:

end